/* Generated by wayland-scanner 1.21.0 */

#ifndef QNX_WESTON_DESKTOP_EXTENSION_CLIENT_PROTOCOL_H
#define QNX_WESTON_DESKTOP_EXTENSION_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_qnx_weston_desktop_extension The qnx_weston_desktop_extension protocol
 * @section page_ifaces_qnx_weston_desktop_extension Interfaces
 * - @subpage page_iface_qnx_weston_desktop_shell_extension - Extensions to the weston desktop shell for QNX
 */
struct qnx_weston_desktop_shell_extension;
struct wl_output;
struct wl_surface;

#ifndef QNX_WESTON_DESKTOP_SHELL_EXTENSION_INTERFACE
#define QNX_WESTON_DESKTOP_SHELL_EXTENSION_INTERFACE
/**
 * @page page_iface_qnx_weston_desktop_shell_extension qnx_weston_desktop_shell_extension
 * @section page_iface_qnx_weston_desktop_shell_extension_desc Description
 *
 * @section page_iface_qnx_weston_desktop_shell_extension_api API
 * See @ref iface_qnx_weston_desktop_shell_extension.
 */
/**
 * @defgroup iface_qnx_weston_desktop_shell_extension The qnx_weston_desktop_shell_extension interface
 *
 */
extern const struct wl_interface qnx_weston_desktop_shell_extension_interface;
#endif

#ifndef QNX_WESTON_DESKTOP_SHELL_EXTENSION_SURFACE_STATE_ACTION_ENUM
#define QNX_WESTON_DESKTOP_SHELL_EXTENSION_SURFACE_STATE_ACTION_ENUM
enum qnx_weston_desktop_shell_extension_surface_state_action {
	QNX_WESTON_DESKTOP_SHELL_EXTENSION_SURFACE_STATE_ACTION_ACTIVATED = 0,
	QNX_WESTON_DESKTOP_SHELL_EXTENSION_SURFACE_STATE_ACTION_DESTROYED = 1,
};
#endif /* QNX_WESTON_DESKTOP_SHELL_EXTENSION_SURFACE_STATE_ACTION_ENUM */

#ifndef QNX_WESTON_DESKTOP_SHELL_EXTENSION_TASKBAR_POSITION_ENUM
#define QNX_WESTON_DESKTOP_SHELL_EXTENSION_TASKBAR_POSITION_ENUM
enum qnx_weston_desktop_shell_extension_taskbar_position {
	QNX_WESTON_DESKTOP_SHELL_EXTENSION_TASKBAR_POSITION_TOP = 0,
	QNX_WESTON_DESKTOP_SHELL_EXTENSION_TASKBAR_POSITION_BOTTOM = 1,
	QNX_WESTON_DESKTOP_SHELL_EXTENSION_TASKBAR_POSITION_LEFT = 2,
	QNX_WESTON_DESKTOP_SHELL_EXTENSION_TASKBAR_POSITION_RIGHT = 3,
};
#endif /* QNX_WESTON_DESKTOP_SHELL_EXTENSION_TASKBAR_POSITION_ENUM */

#ifndef QNX_WESTON_DESKTOP_SHELL_EXTENSION_SURFACE_PRESENT_STATE_ENUM
#define QNX_WESTON_DESKTOP_SHELL_EXTENSION_SURFACE_PRESENT_STATE_ENUM
enum qnx_weston_desktop_shell_extension_surface_present_state {
	QNX_WESTON_DESKTOP_SHELL_EXTENSION_SURFACE_PRESENT_STATE_TOGGLE = 0,
	QNX_WESTON_DESKTOP_SHELL_EXTENSION_SURFACE_PRESENT_STATE_DESTROY = 1,
};
#endif /* QNX_WESTON_DESKTOP_SHELL_EXTENSION_SURFACE_PRESENT_STATE_ENUM */

/**
 * @ingroup iface_qnx_weston_desktop_shell_extension
 * @struct qnx_weston_desktop_shell_extension_listener
 */
struct qnx_weston_desktop_shell_extension_listener {
	/**
	 */
	void (*configure)(void *data,
			  struct qnx_weston_desktop_shell_extension *qnx_weston_desktop_shell_extension,
			  uint32_t edges,
			  int32_t width,
			  int32_t height);
	/**
	 * A new surface has been presented, notify clients to take action
	 *
	 * 
	 */
	void (*surface_mapped)(void *data,
			       struct qnx_weston_desktop_shell_extension *qnx_weston_desktop_shell_extension,
			       uint32_t surface_id,
			       const char *name);
	/**
	 * Notify the client of new surface state
	 *
	 * 
	 */
	void (*surface_state_changed)(void *data,
				      struct qnx_weston_desktop_shell_extension *qnx_weston_desktop_shell_extension,
				      uint32_t surface_id,
				      uint32_t surface_state);
};

/**
 * @ingroup iface_qnx_weston_desktop_shell_extension
 */
static inline int
qnx_weston_desktop_shell_extension_add_listener(struct qnx_weston_desktop_shell_extension *qnx_weston_desktop_shell_extension,
						const struct qnx_weston_desktop_shell_extension_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) qnx_weston_desktop_shell_extension,
				     (void (**)(void)) listener, data);
}

#define QNX_WESTON_DESKTOP_SHELL_EXTENSION_SET_TASKBAR 0
#define QNX_WESTON_DESKTOP_SHELL_EXTENSION_SET_TASKBAR_POSITION 1
#define QNX_WESTON_DESKTOP_SHELL_EXTENSION_SET_SURFACE_PRESENT_STATE 2

/**
 * @ingroup iface_qnx_weston_desktop_shell_extension
 */
#define QNX_WESTON_DESKTOP_SHELL_EXTENSION_CONFIGURE_SINCE_VERSION 1
/**
 * @ingroup iface_qnx_weston_desktop_shell_extension
 */
#define QNX_WESTON_DESKTOP_SHELL_EXTENSION_SURFACE_MAPPED_SINCE_VERSION 1
/**
 * @ingroup iface_qnx_weston_desktop_shell_extension
 */
#define QNX_WESTON_DESKTOP_SHELL_EXTENSION_SURFACE_STATE_CHANGED_SINCE_VERSION 1

/**
 * @ingroup iface_qnx_weston_desktop_shell_extension
 */
#define QNX_WESTON_DESKTOP_SHELL_EXTENSION_SET_TASKBAR_SINCE_VERSION 1
/**
 * @ingroup iface_qnx_weston_desktop_shell_extension
 */
#define QNX_WESTON_DESKTOP_SHELL_EXTENSION_SET_TASKBAR_POSITION_SINCE_VERSION 1
/**
 * @ingroup iface_qnx_weston_desktop_shell_extension
 */
#define QNX_WESTON_DESKTOP_SHELL_EXTENSION_SET_SURFACE_PRESENT_STATE_SINCE_VERSION 1

/** @ingroup iface_qnx_weston_desktop_shell_extension */
static inline void
qnx_weston_desktop_shell_extension_set_user_data(struct qnx_weston_desktop_shell_extension *qnx_weston_desktop_shell_extension, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) qnx_weston_desktop_shell_extension, user_data);
}

/** @ingroup iface_qnx_weston_desktop_shell_extension */
static inline void *
qnx_weston_desktop_shell_extension_get_user_data(struct qnx_weston_desktop_shell_extension *qnx_weston_desktop_shell_extension)
{
	return wl_proxy_get_user_data((struct wl_proxy *) qnx_weston_desktop_shell_extension);
}

static inline uint32_t
qnx_weston_desktop_shell_extension_get_version(struct qnx_weston_desktop_shell_extension *qnx_weston_desktop_shell_extension)
{
	return wl_proxy_get_version((struct wl_proxy *) qnx_weston_desktop_shell_extension);
}

/** @ingroup iface_qnx_weston_desktop_shell_extension */
static inline void
qnx_weston_desktop_shell_extension_destroy(struct qnx_weston_desktop_shell_extension *qnx_weston_desktop_shell_extension)
{
	wl_proxy_destroy((struct wl_proxy *) qnx_weston_desktop_shell_extension);
}

/**
 * @ingroup iface_qnx_weston_desktop_shell_extension
 */
static inline void
qnx_weston_desktop_shell_extension_set_taskbar(struct qnx_weston_desktop_shell_extension *qnx_weston_desktop_shell_extension, struct wl_output *output, struct wl_surface *surface)
{
	wl_proxy_marshal_flags((struct wl_proxy *) qnx_weston_desktop_shell_extension,
			 QNX_WESTON_DESKTOP_SHELL_EXTENSION_SET_TASKBAR, NULL, wl_proxy_get_version((struct wl_proxy *) qnx_weston_desktop_shell_extension), 0, output, surface);
}

/**
 * @ingroup iface_qnx_weston_desktop_shell_extension
 *
 * Tell the shell which side of the screen the taskbar is
 * located. This is so that new windows do not overlap the taskbar
 * and maximized windows maximize properly.
 */
static inline void
qnx_weston_desktop_shell_extension_set_taskbar_position(struct qnx_weston_desktop_shell_extension *qnx_weston_desktop_shell_extension, uint32_t position)
{
	wl_proxy_marshal_flags((struct wl_proxy *) qnx_weston_desktop_shell_extension,
			 QNX_WESTON_DESKTOP_SHELL_EXTENSION_SET_TASKBAR_POSITION, NULL, wl_proxy_get_version((struct wl_proxy *) qnx_weston_desktop_shell_extension), 0, position);
}

/**
 * @ingroup iface_qnx_weston_desktop_shell_extension
 *
 * Pass inputs from desktop shell to compositor
 */
static inline void
qnx_weston_desktop_shell_extension_set_surface_present_state(struct qnx_weston_desktop_shell_extension *qnx_weston_desktop_shell_extension, uint32_t surface_id, uint32_t state)
{
	wl_proxy_marshal_flags((struct wl_proxy *) qnx_weston_desktop_shell_extension,
			 QNX_WESTON_DESKTOP_SHELL_EXTENSION_SET_SURFACE_PRESENT_STATE, NULL, wl_proxy_get_version((struct wl_proxy *) qnx_weston_desktop_shell_extension), 0, surface_id, state);
}

#ifdef  __cplusplus
}
#endif

#endif
